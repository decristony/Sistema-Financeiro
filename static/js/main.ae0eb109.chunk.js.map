{"version":3,"sources":["App.Styles.ts","data/categories.ts","data/items.ts","helpers/dateFilter.ts","components/tableArea/styles.ts","components/TableItem/styles.ts","components/TableItem/index.tsx","components/tableArea/index.tsx","components/InfoArea/styles.ts","components/resumeItem/styles.ts","components/resumeItem/index.tsx","components/InfoArea/index.tsx","components/inputArea/style.ts","components/inputArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","HeaderText","h1","Body","categories","food","title","color","expense","rent","Salary","items","date","Date","category","value","formateDate","year","getFullYear","month","getMonth","day","getDate","addZeroToDate","n","formatCurrentMonth","currentMonth","split","parseInt","Table","table","TableHeadColumn","th","props","width","TableLine","tr","Category","Value","TableColumn","td","TableItem","item","TableArea","list","map","index","MonthArea","MonthArrow","MonthTitle","ResumeArea","Title","Info","ResumeItem","InfoArea","onMonthChange","income","onClick","currentDate","setMonth","InputLabel","label","InputTitle","Input","input","Select","select","Button","button","InputArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","type","onChange","e","target","key","parseFloat","errors","isNaN","getTime","push","includes","length","alert","join","App","setList","filteredList","setFilteredList","now","getCurrentMounth","currentMounth","setCurrentMounth","setIncome","setExpense","useEffect","incomeCount","expenseCount","i","newList","FillterListByMonth","newMonth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae0eb109.chunk.js","sourcesContent":["import styled from \"styled-components\";\nexport const Container = styled.div`\n\n`;\nexport const Header = styled.div`\nbackground-color:#171640;\nheight : 9.375rem;\ntext-align: center;\n\n`;\nexport const HeaderText = styled.h1`\ncolor: #F28705;\nmargin: 0;\npadding:0;\npadding-top: 1.875rem;\n`;\nexport const Body = styled.div`\nborder-radius:20px;\ncolor:#171640;\nmargin: auto;\nmax-width: 61.25rem;\nmin-height:37.5rem;\nmargin-bottom:3.125rem;\n`;\n\n","import { Category } from \"../types/category\"\nexport const categories: Category = {\n  food: { title: 'Alimentaçao', color: '#F2561D', expense: true },\n  rent: { title: 'Aluguel', color: '#F28705', expense: true },\n  Salary: { title: 'Salário', color: '#027313', expense: false }\n}","import { Item } from '../types/item'\nexport const items: Item[] = [\n  { date: new Date(2021, 9, 6), category: 'food', title: 'mcDonalds', value: 34.90 },\n  { date: new Date(2021, 6, 12), category: 'food', title: 'Burger king', value: 50 },\n  { date: new Date(2021, 9, 16), category: 'rent', title: 'Aluguel Apt', value: 1500 },\n  { date: new Date(2021, 9, 12), category: 'Salary', title: 'Salario', value: 3400.90 }\n\n]","import { Item } from \"../types/item\";\nexport const getCurrentMounth = () => {\n  let now = new Date();\n  return `${now.getFullYear()}-${now.getMonth() + 1}`;\n}\n\nexport const FillterListByMonth = (list: Item[], date: string): Item[] => {\n  let newList: Item[] = [];\n  let [year, month] = date.split('-');\n\n  for (let i in list) {\n    if (list[i].date.getFullYear() === parseInt(year) && list[i].date.getMonth() + 1 === parseInt(month)) {\n      newList.push(list[i]);\n    }\n  }\n\n  return newList;\n}\n\nexport const formateDate = (date: Date): string => {\n  let year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n\n  return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`\n}\n\nconst addZeroToDate = (n: number): string => n < 10 ? `0${n}` : `${n}`;\n\nexport const formatCurrentMonth = (currentMonth: string): string => {\n  let [year, month] = currentMonth.split('-');\n  let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']\n  return `${months[parseInt(month) - 1]} de ${year}`;\n}\n","import styled from \"styled-components\";\n\nexport const Table = styled.table`\nwidth:100%;\nbackground-color:#fff;\npadding:20px;\nbox-shadow: 0px 0px 5px #737373;\nborder-radius: 10px;\nmargin-top:20px;\n`;\n\nexport const TableHeadColumn = styled.th<{ width?: number }>`\n width: ${props => props.width ? `${props.width}px` : 'auto'}\n  padding:10px 0;\n  text-align:left;\n  margin:20px;\n`;","import styled from \"styled-components\";\n\nexport const TableLine = styled.tr``;\n\nexport const Category = styled.div<{ color: string }>`\ndisplay: inline-block;\npadding: 5px 10px;\nborder-radius:5px;\ncolor:#ffffff;\nbackground-color: ${props => props.color} \n\n\n`;\n\nexport const Value = styled.div<{ color: string }>`\ncolor:${props => props.color}\n\n`\n\nexport const TableColumn = styled.td`\npadding:10px 0;\n\n\n`;\n","import * as C from \"./styles\";\nimport { Item } from \"../../types/item\";\nimport { formateDate } from \"../../helpers/dateFilter\";\nimport { categories } from \"../../data/categories\";\n\ntype Props = {\n  item: Item;\n};\n\nexport const TableItem = ({ item }: Props) => {\n  return (\n    <C.TableLine>\n      <C.TableColumn>{formateDate(item.date)}</C.TableColumn>\n      <C.TableColumn>\n        <C.Category color={categories[item.category].color}>\n          {categories[item.category].title}\n        </C.Category>\n      </C.TableColumn>\n      <C.TableColumn>{item.title}</C.TableColumn>\n      <C.TableColumn>\n        <C.Value\n          color={categories[item.category].expense ? \"#D92534\" : \"#027313\"}\n        >\n          R${item.value}\n        </C.Value>\n      </C.TableColumn>\n    </C.TableLine>\n  );\n};\n","import * as C from \"./styles\";\nimport { Item } from \"../../types/item\";\nimport { TableItem } from \"../TableItem\";\n\ntype Props = {\n  list: Item[];\n};\n\nexport const TableArea = ({ list }: Props) => {\n  return (\n    <C.Table>\n      <thead>\n        <tr>\n          <C.TableHeadColumn width={100}>Data</C.TableHeadColumn>\n          <C.TableHeadColumn width={130}>Categoria</C.TableHeadColumn>\n          <C.TableHeadColumn>Titulo</C.TableHeadColumn>\n          <C.TableHeadColumn width={150}>Valor</C.TableHeadColumn>\n        </tr>\n      </thead>\n      <tbody>\n        {list.map((item, index) => (\n          <TableItem key={index} item={item} />\n        ))}\n      </tbody>\n    </C.Table>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const MonthArea = styled.div`\nflex:1;\ndisplay:flex;\nalign-items:center;\n\n`\nexport const MonthArrow = styled.div`\nwidth:40px;\ntext-align:center;\nfont-size:25px;\ncursor:pointer;\n`\nexport const MonthTitle = styled.div`\nflex:1;\ntext-align:center;\n\n`\nexport const ResumeArea = styled.div`\nflex:2;\ndisplay:flex;\n\n`\n\nexport const Container = styled.div`\nbackground-color:white;\nbox-shadow: 0px 0px 5px  #CCC;\nborder-radius: 10px;\npadding: 20px;\nmargin-top:-40px;\ndisplay: flex;\nalign-items:center;\n\n`;","import styled from \"styled-components\";\n\nexport const Container = styled.div`\nflex:1;\n\n`;\n\nexport const Title = styled.div`\ntext-align: center;\nfont-weight:bold;\ncolor:#171640;\n`\n\nexport const Info = styled.div<{ color?: string }>`\ntext-align: center;\nfont-weight:bold;\ncolor:${props => props.color ?? '#000'};\n\n`\n","import * as C from \"./styles\";\n\ntype Props = {\n  title: string;\n  value: number;\n  color?: string;\n};\nexport const ResumeItem = ({ title, value, color }: Props) => {\n  return (\n    <C.Container>\n      <C.Title>{title}</C.Title>\n      <C.Info color={color}>R$ {value}</C.Info>\n    </C.Container>\n  );\n};\n","import * as C from \"./styles\";\nimport { formatCurrentMonth } from \"../../helpers/dateFilter\";\nimport { ResumeItem } from \"../resumeItem\";\n\ntype Props = {\n  currentMonth: string;\n  onMonthChange: (newMonth: string) => void;\n  income: number;\n  expense: number;\n};\n\nexport const InfoArea = ({\n  currentMonth,\n  onMonthChange,\n  income,\n  expense,\n}: Props) => {\n  const handlePrevMonth = () => {\n    let [year, month] = currentMonth.split(\"-\");\n    let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n    currentDate.setMonth(currentDate.getMonth() - 1);\n    onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\n  };\n\n  const handleNextMonth = () => {\n    let [year, month] = currentMonth.split(\"-\");\n    let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n    currentDate.setMonth(currentDate.getMonth() + 1);\n    onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\n  };\n\n  return (\n    <C.Container>\n      <C.MonthArea>\n        <C.MonthArrow onClick={handlePrevMonth}>⬅️</C.MonthArrow>\n        <C.MonthTitle>{formatCurrentMonth(currentMonth)}</C.MonthTitle>\n        <C.MonthArrow onClick={handleNextMonth}>➡️</C.MonthArrow>\n      </C.MonthArea>\n      <C.ResumeArea>\n        <ResumeItem title=\" Receita\" value={income} />\n        <ResumeItem title=\" Despesas\" value={expense} />\n        <ResumeItem\n          title=\" Balanço\"\n          value={income - expense}\n          color={income - expense < 0 ? \"red\" : \"green\"}\n        />\n      </C.ResumeArea>\n    </C.Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    background-color: #FFF;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: 20px;\n    display: flex;\n    align-items: center;\n`;\nexport const InputLabel = styled.label`\n    flex: 1;\n    margin: 10px;\n`;\nexport const InputTitle = styled.div`\n    font-weight: bold;\n    margin-bottom: 5px;\n`;\nexport const Input = styled.input`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n`;\nexport const Select = styled.select`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n`;\nexport const Button = styled.button`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n    background-color: lightblue;\n    color: black;\n    cursor: pointer;\n    &:hover {\n        background-color: blue;\n        color: white;\n    }\n`;","import { useState } from \"react\";\nimport * as C from \"./style\";\nimport { Item } from \"../../types/item\";\n\nimport { categories } from \"../../data/categories\";\n\ntype Props = {\n  onAdd: (item: Item) => void;\n};\n\nexport const InputArea = ({ onAdd }: Props) => {\n  const [dateField, setDateField] = useState(\"\");\n  const [categoryField, setCategoryField] = useState(\"\");\n  const [titleField, setTitleField] = useState(\"\");\n  const [valueField, setValueField] = useState(0);\n\n  let categoryKeys: string[] = Object.keys(categories);\n\n  const handleAddEvent = () => {\n    let errors: string[] = [];\n\n    if (isNaN(new Date(dateField).getTime())) {\n      errors.push(\"Data inválida!\");\n    }\n    if (!categoryKeys.includes(categoryField)) {\n      errors.push(\"Categoria inválida!\");\n    }\n    if (titleField === \"\") {\n      errors.push(\"Título vazio!\");\n    }\n    if (valueField <= 0) {\n      errors.push(\"Valor inválido!\");\n    }\n\n    if (errors.length > 0) {\n      alert(errors.join(\"\\n\"));\n    } else {\n      onAdd({\n        date: new Date(dateField),\n        category: categoryField,\n        title: titleField,\n        value: valueField,\n      });\n      clearFields();\n    }\n  };\n\n  const clearFields = () => {\n    setDateField(\"\");\n    setCategoryField(\"\");\n    setTitleField(\"\");\n    setValueField(0);\n  };\n\n  return (\n    <C.Container>\n      <C.InputLabel>\n        <C.InputTitle>Data</C.InputTitle>\n        <C.Input\n          type=\"date\"\n          value={dateField}\n          onChange={(e) => setDateField(e.target.value)}\n        />\n      </C.InputLabel>\n      <C.InputLabel>\n        <C.InputTitle>Categoria</C.InputTitle>\n        <C.Select\n          value={categoryField}\n          onChange={(e) => setCategoryField(e.target.value)}\n        >\n          <>\n            <option></option>\n            {categoryKeys.map((key, index) => (\n              <option key={index} value={key}>\n                {categories[key].title}\n              </option>\n            ))}\n          </>\n        </C.Select>\n      </C.InputLabel>\n      <C.InputLabel>\n        <C.InputTitle>Título</C.InputTitle>\n        <C.Input\n          type=\"text\"\n          value={titleField}\n          onChange={(e) => setTitleField(e.target.value)}\n        />\n      </C.InputLabel>\n      <C.InputLabel>\n        <C.InputTitle>Valor</C.InputTitle>\n        <C.Input\n          type=\"number\"\n          value={valueField}\n          onChange={(e) => setValueField(parseFloat(e.target.value))}\n        />\n      </C.InputLabel>\n      <C.InputLabel>\n        <C.InputTitle>&nbsp;</C.InputTitle>\n        <C.Button onClick={handleAddEvent}>Adicionar</C.Button>\n      </C.InputLabel>\n    </C.Container>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport * as C from \"./App.Styles\";\nimport { Item } from \"./types/item\";\nimport { categories } from \"./data/categories\";\nimport { items } from \"./data/items\";\nimport { getCurrentMounth, FillterListByMonth } from \"./helpers/dateFilter\";\nimport { TableArea } from \"./components/tableArea\";\nimport { InfoArea } from \"./components/InfoArea\";\nimport { InputArea } from \"./components/inputArea\";\n\nconst App = () => {\n  const [list, setList] = useState(items);\n  const [filteredList, setFilteredList] = useState<Item[]>([]);\n  const [currentMounth, setCurrentMounth] = useState(getCurrentMounth());\n\n  const [income, setIncome] = useState(0);\n  const [expense, setExpense] = useState(0);\n\n  useEffect(() => {\n    let incomeCount = 0;\n    let expenseCount = 0;\n\n    for (let i in filteredList) {\n      if (categories[filteredList[i].category].expense) {\n        expenseCount += filteredList[i].value;\n      } else {\n        incomeCount += filteredList[i].value;\n      }\n    }\n\n    setIncome(incomeCount);\n    setExpense(expenseCount);\n  }, [filteredList]);\n\n  useEffect(() => {\n    setFilteredList(FillterListByMonth(list, currentMounth));\n  }, [list, currentMounth]);\n\n  const handleMonthChange = (newMonth: string) => {\n    setCurrentMounth(newMonth);\n  };\n\n  const handleAddItem = (item: Item) => {\n    let newList = [...list];\n    newList.push(item);\n    setList(newList);\n  };\n\n  return (\n    <C.Container>\n      <C.Header>\n        <C.HeaderText>Sistema Financeiro</C.HeaderText>\n      </C.Header>\n      <C.Body>\n        {/*area de informaçoes*/}\n        <InfoArea\n          currentMonth={currentMounth}\n          onMonthChange={handleMonthChange}\n          income={income}\n          expense={expense}\n        />\n\n        {/*area de inserção*/}\n        <InputArea onAdd={handleAddItem} />\n\n        {/*tabela de itens*/}\n        <TableArea list={filteredList} />\n      </C.Body>\n    </C.Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}